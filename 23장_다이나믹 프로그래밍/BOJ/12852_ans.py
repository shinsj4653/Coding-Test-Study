# 1 : 1
# 2 : 2 -> 1
# 3 : 3 -> 1

# 4 : 4 -> 2 -> 1
# 5 : 5 -> 4 -> 2 -> 1
# 6 : 6 -> 2 -> 1
# 7 : 7 -> 6 -> 2 -> 1
# 8 : 8 -> 4 -> 2 -> 1
# 9 : 9 -> 3 -> 1

# 10 : 10 -> 9 -> 3 -> 1
# 10 // 2 -> 5, 10 // 3 -> 3, 10 - 1 -> 9

# 바킹독 다익스트라 -> pre 배열 활용하는거에서 영감 얻음!
# 바텀업 방식에서, 각 숫자가 어떤 숫자로 변하는지에 대한 정보만 있으면
# 그거에 따라 역 추적해서 경로 출력 하면됨
# 근데 내 풀이, 바킹독 풀이 모두 자꾸 틀림..
# https://velog.io/@hamfan524/%EB%B0%B1%EC%A4%80-12852%EB%B2%88-Python-%ED%8C%8C%EC%9D%B4%EC%8D%AC-DP



# 탑 다운이 아니라, 바텀업으로 가야할듯??

import sys
input = sys.stdin.readline

n = int(input().rstrip())

dp = [[0, []] for _ in range(n + 1)]
dp[1][0] = 0
dp[1][1] = [1]

for i in range(2, n + 1) :
    dp[i][0] = dp[i - 1][0] + 1
    dp[i][1] = dp[i - 1][1] + [i]

    if i % 3 == 0 and dp[i // 3][0] + 1 < dp[i][0]:
        dp[i][0] = dp[i // 3][0] + 1
        dp[i][1] = dp[i // 3][1] + [i]
    if i % 2 == 0 and dp[i // 2][0] + 1 < dp[i][0]:
        dp[i][0] = dp[i // 2][0] + 1
        dp[i][1] = dp[i // 2][1] + [i]

print(dp[n][0])
print(*reversed(dp[n][1]))
